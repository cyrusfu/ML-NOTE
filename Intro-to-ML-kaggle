#first is to import helpful libraries
import pandas as pd
from sklearn.ensemble import RandomForestRegressor 
from sklearn.metrics import mean_absolute_error # this tool is to evaluate the accurate of ur model
from sklear.model_selection import train_test_split # this is to split ur data into two which u can use to evaluate ur predicts if it is overffting or underffting

#This is a kaggle competition about house pricing predict

#first is to load ur data
iowa_file_path = '...'
home_data = pd.read(iowa_file_path)
y = home_data.SalePrice #this is ur target 

#this is the features that u want to use to fit ur model
features = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd','MSSubClass','OverallQual' ,'OverallCond' ,'YearRemodAdd' ,'GrLivArea']
X = home_data[features]

#Beacouse we want to evaluate our model by the data we have got , so we can split our date into two part
train_X,val_X,train_y,val_y =train_test_split(X,y,random_state = 1)

#after we split our date into train data and validation data, then we can try to build our model to predict
train_model = RandomForestRegressor(random_state = 1)
train_model.fit(train_X,train_y)
preds_val = train_model.predict(val_X)
#then we use mae to validation our model if it is effective
train_model_mae = mean_absolute_error(val_y,perds_val)

print('MAE for random forest model : {:,.0f}".format(train_model_mae))

#after we are sure that the model meets our requirements we can train our model by full data
fullrf_model =RandomForestRegressor(random_state = 1)
fullrf_model.fit(X,y)

test_data_path = '...'
test_data = pd.read_csv(test_data_path)
test_dataX = test_data[features]
test_preds = fullrf_model.predict(test_dataX)

#we can save predictions and submit our predictoin

output = pd.DaraFrame({'Id': test_data.Id,
                       'SalePrice': test_preds})
output.to_csv('submission.csv',index = False)
